#!/bin/bash

migrateExecutable=./src/Dynamo/Cli/Migrate.php
migrateLocation=./src/Dynamo/Migrations
migrateMock=/tmp/dynamo-migration-mock.php
migrateChangeLog=$migrateLocation/changelog.log

Migrate_create()
{
    migrationName=$(dialog --inputbox "Please insert the migration name" --stdout 0 0)
    migrationName=$(echo ${migrationName// /_} | awk '{print tolower($0)}')
    migrationClass=$(echo $migrationName | sed 's/\(^.\)/\u&/g' | sed 's/_\([a-z]\)/\u\1/g')
    migrationDate=$(eval date +%Y%m%d%H%M%S)
    migrationFile="$migrateLocation/$migrationDate-$migrationName.php"

    [ -f $migrationFile ]                                    && \
        dialog --msgbox "[!] This migration already exists!" && \
        exit 1;

    [[ $migrationName == "" ]]                             && \
        dialog --msgbox "[!] Must set a name!\nExiting..." && \
        exit 1;

    ! [ -d $migrateLocation ] && \
        mkdir -P $migrateLocation 2>/dev/null;

cat << EOF > $migrateMock
<?php
namespace Dynamo\Migrations;

use \Dynamo\MigrableAbstract;
use \Dynamo\MigrableException;

use \Aws\DynamoDb\Enum\KeyType;
use \Aws\DynamoDb\Enum\Type;

/**
 * This class was auto generated by migrate tool
 * If you want to see how proceed with DynamoDb, please follow the link:
 * http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html
 */
class ${migrationClass}${migrationDate} extends MigrableAbstract
{
    public function doMigration()
    {
        /* @TODO Put your migration updates here */
        return;
    }

    public function undoMigration()
    {
        /* @TODO Put your migration undos here */
        return;
    }
}
EOF

    cp $migrateMock $migrationFile &&
        dialog --msgbox "The migration $migrationFile was created successfully!" 0 0;

}

Migrate_update()
{
    >/tmp/$0-update.log

    for name in $(find $migrateLocation -name "*.php")
    do
        isInChangelog="for i in $migrateChangeLog; do [ $name == $i ] && echo 1; done"
        [[ $isInChangelog != 1 ]]   && \
            clear                   && \
            echo -e "\e[32mRunning\e[0m $name..." && \
            php $migrateExecutable                  \
                --setChangelog=$migrateChangeLog    \
                --setMigrationPath=$migrateLocation \
                --doMigration=$name 2>>/tmp/$0-update.log;
    done

    dialog --msgbox "$(cat /tmp/$0-update.log)" 0 0 && clear
}

Migrate_undo()
{
    changelog=$(cat $migrateChangeLog)

    for i in ${changelog[@]}
    do
        [ -f "${migrateLocation}/${i}" ]         && \
            dialog --msgbox "Removing $name" 0 0 && \
            php $migrateExecutable --undoMigration=$i 2>/tmp/$0-remove.log;

        [[ $1 == $(grep -o '^[0-9][0-9]*' $i 2>/dev/null) ]] && \
            break;
    done | tac

    dialog --msgbox "$(cat /tmp/$0-remove.log)" 0 0 && clear
}

Migrate_help()
{
cat << EOF

Help!

Damnit! Do not be shy!
Use these options:
    migrate create [followed by name]      - to create a migration
    migrate update                         - to update the db
    migrate undo [followed by date YmdHMS] - to undo modifications

EOF
}

case $1 in
  create|update|undo) "Migrate_$1" $2;;
  *) Migrate_help ;;
esac

clear